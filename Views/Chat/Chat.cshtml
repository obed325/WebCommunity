
@page

@model WebCommunity.Controllers.ChatController

@using Microsoft.AspNetCore.Identity
@*model ApplicationUser*@

@inject UserManager<WebCommunity.Models.ApplicationUser> UserManager


<div class="container form-group">

    <div class="form-group">
        <label class="control-label">Name</label>
        <input type="text" id="userInput" class="form-control" value="@User.Identity.Name">
        <input type="hidden" value="@User.Identity.Name" id="identityName" />
    </div>
    <div class="form-group">
        <label class="control-label">Message</label>
        <input type="text" id="messageInput" class="form-control" />
    </div>
    <div class="form-group">
        <input type="button" id="sendButton" value="Send/Skicka" class="btn btn-success" />
    </div>
</div>

<div class="row">
    <div class="form-group">
        <ul id="messagesList" style="list-style: none;"></ul>
    </div>
</div>

<div>


</div>

<input type="hidden" id="inputtext" />

<script src="~/lib/jquery/dist/jquery.js"></script>
<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="~/js/chat.js"></script>

<script>

    var input = document.getElementById('messageInput');
    input.addEventListener("keyup", function (event) {
        if ((event.keyCode === 13) && (document.getElementById('messageInput').value !== "")) {
            event.preventDefault();
            document.getElementById('sendButton').click();
            document.getElementById('messageInput').value = "";
            document.getElementById('messageInput').focus();
        }
    })


    var idName = document.getElementById('identityName').value;
    var target = document.getElementById('messagesList');

    //if (document.getElementById('messagesList').childNodes.length === 0) {

    //    let chats = getChatConversations();
    //    document.getElementById('messagesList').value = chats;
    //}

    //var hasTags = document.getElementById("messagesList");

    //if (hasTags.hasChildNodes()) {


    var observer = new MutationObserver(function (mutations) {
        mutations.forEach(function (mutation) {

            var newTags = mutation.addedNodes;
            if (newTags !== null) { //if there are new nodes
                var $nodes = $(newTags);

                $nodes.each(function () {
                    var $node = $(this);

                    textflow = $node[0].outerHTML;
                    saveMessToDb(textflow, idName);
                });
            }

        });
    });

    // Options for the observer (mutations to observe)
    const config = { attributes: true, childList: true, subtree: true };
    observer.observe(target, config);//set what to observe


    //}
    //else {
    //    let idName = document.getElementById("identityName").value
    //    getChatConversations(idName);
    //}



    function saveMessToDb(flow, idName) {

        $.ajax({
            type: 'POST',
            url: "@Url.Action("SaveChat")",
            data: { "parameter1": flow, "identityName": idName },

            success: function (msg) {
                console.log(msg);
            },
            error: function (req, status, error) {
                console.log(msg);
            }
        });
    }

</script>

    @*function getChatConversations(idName) {

        $.ajax({
            type: 'POST',
            url: "@Url.Action("GetChatConversations")",
            data: { "identityName": idName },
            dataType: "text",

            success: function (messageHistory) {

                document.getElementById("messagesList").outerHTML = messageHistory;

            },
            error: function (req, status, error) {
                console.log(msg);
            }

        });

    }*@



